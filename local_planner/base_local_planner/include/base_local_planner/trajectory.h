/*********************************************************************
* Developer: Arvin
 *********************************************************************/
#ifndef TRAJECTORY_ROLLOUT_TRAJECTORY_H_
#define TRAJECTORY_ROLLOUT_TRAJECTORY_H_

#include <vector>

namespace base_local_planner {
  /**
   * @class Trajectory
   * @brief Holds a trajectory generated by considering an x, y, and theta velocity
   */
  class Trajectory {
    public:
      /**
       * @brief  Default constructor
       */
      Trajectory();

      //初始化，设置xyw的速度、评分、变化量等
      Trajectory(double xv, double yv, double thetav, double time_delta, unsigned int num_pts);

      double xv_, yv_, thetav_; ///< @brief The x, y, and theta velocities of the trajectory
      double cost_; ///< @brief The cost/score of the trajectory
      double time_delta_; ///< @brief The time gap between points

      //引用赋值，获得index的点的的x，y，theta
      void getPoint(unsigned int index, double& x, double& y, double& th) const;

      //设置index的x，y，theta
      void setPoint(unsigned int index, double x, double y, double th);

      //push一个新点
      void addPoint(double x, double y, double th);

      //返回最后的点
      void getEndpoint(double& x, double& y, double& th) const;

      //清空三个vector
      void resetPoints();

      //返回点的数量（vector的长度）
      unsigned int getPointsSize() const;

    private:
      //轨迹中的x，y，theta的vector
      std::vector<double> x_pts_; 
      std::vector<double> y_pts_; 
      std::vector<double> th_pts_; 

  };
};
#endif
